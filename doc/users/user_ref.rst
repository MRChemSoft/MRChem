.. raw:: html

    <style> .red {color:#aa0060; font-weight:bold; font-size:18px} </style>

.. role:: red

.. This documentation was autogenerated using parselglossy. Editing by hand is not recommended.

--------------------
User input reference
--------------------

- Keywords without a default value are **required**.
- Default values are either explicit or computed from the value of other keywords in the input.
- Sections where all keywords have a default value can be omitted.
- Predicates, if present, are the functions run to validate user input.

:red:`Keywords`
 :world_prec: Overall relative precision in the calculation. 

  **Type** ``float``

  **Predicates**
    - ``1.0e-10 < value < 1.0``

 :world_size: Total size of computational domain given as 2**(world_size). Always cubic and symmetric around the origin. Negative value means it will be computed from the molecular geometry. 

  **Type** ``int``

  **Default** ``-1``

  **Predicates**
    - ``value <= 10``

:red:`Sections`
 :Plotter: Cube plots of converged orbitals and densities. 

  :red:`Keywords`
   :points: Number of points in each direction on the cube grid. 
  
    **Type** ``List[int]``
  
    **Default** ``[20, 20, 20]``
  
    **Predicates**
      - ``value[0] > 0``
      - ``value[1] > 0``
      - ``value[2] > 0``
  
   :O: Origin of cube plot. 
  
    **Type** ``List[float]``
  
    **Default** ``[0.0, 0.0, 0.0]``
  
   :A: First boundary vector for plot. 
  
    **Type** ``List[float]``
  
    **Default** ``[1.0, 0.0, 0.0]``
  
   :B: Second boundary vector for plot. 
  
    **Type** ``List[float]``
  
    **Default** ``[0.0, 1.0, 0.0]``
  
   :C: Third boundary vector for plot. 
  
    **Type** ``List[float]``
  
    **Default** ``[0.0, 0.0, 1.0]``
  
 :Precisions: Define specific precision parameters. 

  :red:`Keywords`
   :nuc_prec: Precision parameter used in smoothing and projection of nuclear potential. 
  
    **Type** ``float``
  
    **Default** ``user['world_prec']``
  
    **Predicates**
      - ``1.0e-10 < value < 1.0``
  
   :poisson_prec: Precision parameter used in construction of Poisson operators. 
  
    **Type** ``float``
  
    **Default** ``user['world_prec']``
  
    **Predicates**
      - ``1.0e-10 < value < 1.0``
  
   :helmholtz_prec: Precision parameter used in construction of Helmholtz operators. Negative value means it will follow the dynamic precision in SCF. 
  
    **Type** ``float``
  
    **Default** ``user['world_prec']``
  
 :Printer: Define variables for printed output. 

  :red:`Keywords`
   :print_level: Level of detail in the written output. Level 0 for production calculations. 
  
    **Type** ``int``
  
    **Default** ``0``
  
    **Predicates**
      - ``value >= 0``
  
   :print_input: Print the user input file at the start of the calculation. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :print_mpi: Write separate output from each MPI to file called <file_name>-<mpi-rank>.out. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :file_name: Name of output file in MPI print. 
  
    **Type** ``str``
  
    **Default** ``mrchem``
  
   :print_prec: Number of digits in property output (energy with factor two). 
  
    **Type** ``int``
  
    **Default** ``6``
  
    **Predicates**
      - ``0 < value < 10``
  
   :print_width: Line width of printed output (in number of characters). 
  
    **Type** ``int``
  
    **Default** ``70``
  
    **Predicates**
      - ``50 < value < 100``
  
 :MPI: Define MPI related parameters. 

  :red:`Keywords`
   :numerically_exact: This will use MPI algorithms that guarantees that the output is invariant wrt the number of MPI processes. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :shared_memory_size: Size (MB) of the MPI shared memory blocks of each shared function. 
  
    **Type** ``int``
  
    **Default** ``10000``
  
   :share_nuclear_potential: This will use MPI shared memory for the nuclear potential. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :share_coulomb_potential: This will use MPI shared memory for the Coulomb potential. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
 :Basis: Define polynomial basis. 

  :red:`Keywords`
   :order: Polynomial order of multiwavelet basis. Negative value means it will be set automatically based on the world precision. 
  
    **Type** ``int``
  
    **Default** ``-1``
  
   :type: Polynomial type of multiwavelet basis. 
  
    **Type** ``str``
  
    **Default** ``interpolating``
  
    **Predicates**
      - ``value[0].lower() in ['i', 'l']``
  
 :Derivatives: Define various derivative operators used in the code. 

  :red:`Keywords`
   :kinetic: Derivative used in kinetic operator. 
  
    **Type** ``str``
  
    **Default** ``abgv_55``
  
 :Molecule: Define molecule. 

  :red:`Keywords`
   :charge: Total charge of molecule.  
  
    **Type** ``int``
  
    **Default** ``0``
  
   :multiplicity: Spin multiplicity of molecule.  
  
    **Type** ``int``
  
    **Default** ``1``
  
   :angstrom: Coordinates given in angstrom rather than bohr. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :translate: Translate center of mass to origin. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :coords: Coordinates in xyz format. 
  
    **Type** ``str``
  
 :WaveFunction: Define the wavefunction method. 

  :red:`Keywords`
   :method: Wavefunction method. See predicates for valid methods. 'hf', 'hartreefock' and 'hartree-fock' all mean the same thing, while 'lda' is an alias for 'svwn5'. You can set a non-standard DFT functional (e.g. varying the amount of exact exchange) by choosing 'dft' and specifing the functional(s) in the 'DFT' section below.  
  
    **Type** ``str``
  
   :restricted: Use spin restricted wavefunction. 
  
    **Type** ``bool``
  
    **Default** ``True``
  
    **Predicates**
      - ``value.lower() in ['core', 'hartree', 'hf', 'hartreefock', 'hartree-fock', 'dft', 'lda', 'svwn3', 'svwn5', 'pbe', 'pbe0', 'bpw91', 'bp86', 'b3p86', 'b3p86-g', 'blyp', 'b3lyp', 'b3lyp-g', 'olyp', 'kt1', 'kt2', 'kt3']``
  
 :DFT: Define the exchange-correlation functional in case of DFT. 

  :red:`Keywords`
   :spin: Use spin separated density functionals. 
  
    **Type** ``bool``
  
    **Default** ``not(user['WaveFunction']['restricted'])``
  
   :use_gamma: Express functional derivative through the gradient invariant gamma. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :density_cutoff: Hard cutoff for passing density values to XCFun. 
  
    **Type** ``float``
  
    **Default** ``0.0``
  
   :functionals: List of density functionals with numerical coefficient. E.g. for PBE0 'EXX 0.25', 'PBEX 0.75', 'PBEC 1.0'. See xcfun documentation for valid functionals.  
  
    **Type** ``str``
  
    **Default** `` ``
  
 :Properties: Provide a list of properties to compute. 

  :red:`Keywords`
   :scf_energy: Compute SCF energy. 
  
    **Type** ``bool``
  
    **Default** ``True``
  
   :dipole_moment: Compute dipole moment. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
 :ExternalFields: Define external electromagnetic fields. 

  :red:`Keywords`
   :electric_field: Strength of external electric field. 
  
    **Type** ``List[float]``
  
    **Default** ``[]``
  
    **Predicates**
      - ``len(value) == 0 or len(value) == 3``
  
 :SCF: Includes parameters related to the ground state SCF orbital optimization (algorithm using explicit calculation of kinetic energy matrix). 

  :red:`Keywords`
   :run: Run SCF solver. Otherwise properties are computed on the initial orbitals. 
  
    **Type** ``bool``
  
    **Default** ``True``
  
   :max_iter: Maximum number of SCF iterations. 
  
    **Type** ``int``
  
    **Default** ``-1``
  
   :kain: Length of KAIN iterative history. 
  
    **Type** ``int``
  
    **Default** ``0``
  
   :rotation: Number of iterations between each diagonalization/localization. 
  
    **Type** ``int``
  
    **Default** ``0``
  
   :localize: Use canonical or localized orbitals. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :orbital_thrs: Convergence threshold for orbtial residuals. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :property_thrs: Convergence threshold for SCF energy. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :guess_prec: Precision parameter used in construction of initial guess. 
  
    **Type** ``float``
  
    **Default** ``user['world_prec']``
  
    **Predicates**
      - ``1.0e-10 < value < 1.0``
  
   :start_prec: Incremental precision in SCF iterations, initial value. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :final_prec: Incremental precision in SCF iterations, final value. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :initial_guess: Type of initial guess. 'mw' reads previously computed orbitals (must be written using the same world size and polynomial type/order). 'gto' reads precomputed GTO orbitals (requires extra non-standard input files for basis set and MO coefficients). 'core' and 'sad' will diagonalize the Fock matrix in the given AO basis (SZ, DZ, TZ or QZ) using a Core or Superposition of Atomic Densities Hamiltonian, respectively. 
  
    **Type** ``str``
  
    **Predicates**
      - ``value.lower() in ['mw', 'gto', 'core_sz', 'core_dz', 'core_tz', 'core_qz', 'sad_sz', 'sad_dz', 'sad_tz', 'sad_qz']``
  
   :write_orbitals: Write converged orbitals to disk. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :plot_density: Plot converged electron density. Including spin densities for open-shell. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :plot_orbital: Plot converged molecular orbitals of given index. Negative first index plots all. 
  
    **Type** ``List[int]``
  
    **Default** ``[]``
  
 :KineticFree: Includes parameters related to the ground state SCF optimization (kinetic free algorithm). 

  :red:`Keywords`
   :run: Run kinetic free SCF solver. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :max_iter: Maximum number of SCF iterations. 
  
    **Type** ``int``
  
    **Default** ``-1``
  
   :localize: Use canonical or localized orbitals. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :start_prec: Incremental precision in SCF iterations, initial value. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :final_prec: Incremental precision in SCF iterations, final value. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :orbital_thrs: Convergence threshold for orbtial residuals. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :property_thrs: Convergence threshold for SCF energy. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
