/** \page Install Compiling and installing the MRCPP program

- \subpage Prerequisites
- \subpage TipsNTricks

\section Download Obtaining the code

\verbatim
$ git clone git@repo.ctcc.no:mrchem.git
$ cd mrchem
$ git submodule init   # initializes libgetkw (obsolete with cmake)
$ git submodule update # clones/updates libgetkw (obsolete with cmake)
\endverbatim

Configuring the code (old autoconf version)

\verbatim
$ ./autogen.sh # generates/updates the configure script, etc.
$ cd libgetkw; ./autogen.sh; cd ..
$ ./configure --help # Check which options might be of importance
$ mkdir Debug # or Release or whatever
$ cd Debug
$ ../configure --with-filters=/path/to/filters
\endverbatim

This assumes you have installed boost and Eigen2 in a standard location (e.g
under /usr or /usr/local).
Using setup
In the toplevel directory there is a convenience script called setup. setup is
a frontend for configure, and which will try to do all of the above
automatically.
setup takes a number of useful command line flags:

\verbatim
    --blas Tries to configure the BLAS backend, for faster linear algebra
    --para Tries to configure the MPI and OpenMP backends
    --omp Configure only OpenMP
    --mpi Configure only MPI
    --prefix=/path/to/my/install
\endverbatim

setup tries to use semi-sensible defaults, but it cannot cover every system.
Most settings can be tuned from the command line by setting environment
variables, e.g.

\verbatim
$ CXX=oompf++ EIGEN=/my/custom/eigen BOOST=/home/turbo/boost ./setup --blas
--omp --mpi
\endverbatim

Please refer to the script itself for a complete list of options. It's a very
simple thing.

If you strongly feel that you have a special system worthy of an entry in the
script, feel free to add your own section. Just make sure it does not
interfere with other people (i.e. don't mess with the generic Ubuntu, MacOSX,
etc. settings, unless you are sure they are faulty). The script tries to
configure in an order which goes from most specific (i.e. hostname (stallo))
to the least specific (i.e. operating system).
Compiling the code

If you ran the setup script, and everything worked out fine, you are ready to
build the program. The best way of building the program is in a directory
separate from the actual sources, so that different builds can exist side by
side. Running setup creates two directories; Debug and Release. The Debug
directory is intended for development and debugging, and the binary built
there is compiled with full debugging information and zero optimization. The
fully optimized production calculation version can be compiled in the Release
directory. To compile either version:

\verbatim
$ cd Release
$ make -j 2
$ make install # optional; installs in /usr/local by default
\endverbatim

Running the program

There are example input files in the toplevel examples directory. If you have
installed the program, simply copy the mrchem.inp file to your calculation
directory and run mrchem. If you have not install the program yet, copy
mrchem.inp to the toplevel build directory (i.e. Debug) and run

\verbatim
$ ./mrchem 
\endverbatim

The mrchem program is a Python frontend which does some input processing, etc.
and then runs the actual program called mrchem.bin. The Python program produces a
temporary input file called @mrchem.inp, which can be deleted when the program
is finished.

Good luck, may the foo be with you!



*/
