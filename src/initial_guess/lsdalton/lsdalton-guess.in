#!@PYTHON_EXECUTABLE@
# -*- coding: utf-8 -*-
# vim:filetype=python:
#
# Written by Stig Rune Jensen <stig.r.jensen@uit.no>
# University of TromsÃ¸, 2018
#

ON=1
OFF=0

dryrun=False

import sys
import os
import optparse
import subprocess
from glob import glob

sys.path.append("@CMAKE_INSTALL_PREFIX@/share/libgetkw/")
sys.path.append("@CMAKE_INSTALL_PREFIX@/@PYTHON_SITE_INSTALL_DIR@")

import getkw
import lsdalton

lsdalton_basdir = "/home/stig/dev/dalton/basis/"
lsdalton_exe = "/home/stig/dev/dalton/lsdalton"

def main():
    global topsect, executable, dryrun

    valid_keywords = setup_keywords()
    inpfil = parse_cmdline(valid_keywords)

    if inpfil is None:
        inpfil = "lsdalton.inp"

    input=getkw.GetkwParser()
    inkw=input.parseFile(inpfil)
    inkw.sanitize(valid_keywords)
    topsect=inkw.get_topsect()
    inkw.run_callbacks(valid_keywords)

    # Read input
    basis = topsect.get('basis').get()
    method = topsect.get('method').get()
    mol = topsect.fetch_sect('Molecule')
    mult = mol.get('multiplicity').get()
    charge = mol.get('charge').get()
    coords = mol.get('coords').get()

    # Run LSDalton
    setup_input(coords, basis, method, charge, mult)

    if not dryrun:
        run_lsdalton()

def run_lsdalton():
    print "\n\nRunning LSDALTON for initial guess\n"
    cmd = lsdalton_exe + " -t . " + " lsdalton >lsdalton.out"
    ret = subprocess.call(cmd, shell=True)
    doPrint = False
    if ret == 0:
        print "======================================================================"
        for line in open("lsdalton.out"):
            if "SCF converged !" in line:
                break
            if doPrint:
                print(line),
            if "LINSCF ITERATIONS" in line:
                doPrint = True
        print "======================================================================"
        print "\nLSDALTON converged"
    else:
        print "LSDALTON failed (see lsdalton.out for details)"
        sys.exit(1)

    cmd = "rm -rf DALTON*"
    ret = subprocess.call(cmd, shell=True)
    for filename in glob("*.tar.*"):
        os.remove(filename)
    for filename in glob("*.out.*"):
        os.remove(filename)

def setup_input(coords, basis, method, charge, mult):
    dalf = lsdalton.makedal(coords, method, charge, mult)
    molf = lsdalton.xyz2mol(coords, basis)
    basf = lsdalton.xyz2bas(coords, basis, lsdalton_basdir)

    try:
        f = open("lsdalton.dal", "w")
        f.write(dalf)
        f.close()
    except:
        print "Writing lsdalton.dal failed"
        sys.exit(1)
    try:
        f = open("lsdalton.mol", "w")
        f.write(molf)
        f.close()
    except:
        print "Writing lsdalton.mol failed"
        sys.exit(1)
    try:
        f = open("mrchem.bas", "w")
        f.write(basf)
        f.close()
    except:
        print "Writing mrchem.bas failed"
        sys.exit(1)

def parse_cmdline(valid_keywords):
    global executable, dryrun
    usage="usage: %prog [options] [config] inpfile"
    cmdln=optparse.OptionParser(usage=usage)
    cmdln.add_option('-D','--dryrun', action='store_true', dest='dryrun',
            default=False, help='Only process input')
    cmdln.add_option('-x','--executable', action='store', dest='executable',
            help='set executable name')
    (opts, args)=cmdln.parse_args()

    if opts.executable:
        executable = opts.executable

    if opts.dryrun:
        dryrun=opts.dryrun

    if (len(args) == 0):
        inpfil=None
    elif (len(args) == 1):
        inpfil=args[0]
    else:
        cmdln.error('incorrect number of files')
        sys.exit(0)
    return inpfil

def setup_keywords():
    top=getkw.Section('toplevel')
    top.set_status(True)
    top.add_kw('basis',                 'STR', '3-21G')
    top.add_kw('method',                'STR', 'HF')

    molecule=getkw.Section('Molecule', callback = verify_molecule)
    molecule.add_kw('charge',           'INT', 0)
    molecule.add_kw('multiplicity',     'INT', 1)
    molecule.add_kw('angstrom',         'BOOL', False)
    molecule.add_kw('coords',           'DATA')
    top.add_sect(molecule)

    return top

def verify_molecule(mol):
    AA = 1.0
    if mol.get('angstrom').get():
        AA = 1.889725989
    coords = mol.get('coords').get()
    i = 0;
    for line in coords[:]:
        sp = line.split()
        elm = sp[0].lower()
        x_a, y_a, z_a = map(float, sp[1:])
        x_b, y_b, z_b = AA*x_a, AA*y_a, AA*z_a
        coords[i] = "%s       % 10.10f    % 10.10f    % 10.10f" % (elm.title(), x_b, y_b, z_b)
        i = i+1
    mol.get('angstrom').set(False)

if __name__ == '__main__':
    main()

