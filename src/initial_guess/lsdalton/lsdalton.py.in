import periodictable
import string
import subprocess
import os
import shutil
import sys
import time
import re
from sets import Set
from periodictable import PeriodicTableByZ as PT
from glob import glob

# Pre-reqs:
# 1. Complete gaussbasis.py
# 2. Add section + keywords for initial guess in mrcpp.in
# 3. Add sanity checks (run or not, etc.)

lsdalton_basdir = "/home/stig/dev/dalton/basis/"
lsdalton_exe = "/home/stig/dev/dalton/lsdalton"

def estimate_energy(coords):
    est_en = 0.0
    for line in coords[:]:
        sp = line.split()
        elm = sp[0].lower()
        Z = periodictable.PeriodicTable[elm].Z
        est_en += pow(Z, 2.5)
    return est_en

# 1. if not exists dir lsdalton, mkdir
# 2. write lsdalton mol file (with basis name)
#    see /scratch/jonas/lsdalt/dalton.mol
#    elements in periodictable.py
# 3. copy lda.dal from datadir
# 4. if sts is ok, copy cmo, en to mrcppdir
# 5. gen mrcpp mol file (see build/pilot/test.bas)
def run_initial_guess(coords, bas, level, charge, mult):
    os.chdir('initial_guess')

    nel = getNElectrons(coords, charge)
    npaired = nel - (mult - 1)
    nalpha = npaired/2 + (mult - 1)
    nbeta = npaired/2
    dalf = makedal(level, nalpha, nbeta)
    xyzf = makexyz(coords)
    molf = xyz2mol(coords, bas)
    basf = xyz2bas(coords, bas)

    try:
        f = open("lsdalton.dal", "w")
        f.write(dalf)
        f.close()
    except:
        print "Writing lsdalton.dal failed"
        sys.exit(1)
    try:
        f = open("lsdalton.mol", "w")
        f.write(molf)
        f.close()
    except:
        print "Writing lsdalton.mol failed"
        sys.exit(1)
    print "\n\nRunning LSDALTON for initial guess\n"
    cmd = lsdalton_exe + " -t . " + " lsdalton >lsdalton.out"
    ret = subprocess.call(cmd, shell=True)
    doPrint = False
    if ret == 0:
        print "======================================================================"
        for line in open("lsdalton.out"):
            if "SCF converged !" in line:
                break
            if doPrint:
                print(line),
            if "LINSCF ITERATIONS" in line:
                doPrint = True
        print "======================================================================"
        print "\nLSDALTON converged"
    else:
        print "LSDALTON failed (see initial_guess/lsdalton.out for details)"
        sys.exit(1)

    cmd = "rm -rf DALTON*"
    ret = subprocess.call(cmd, shell=True)
    for filename in glob("*.tar.*"):
        os.remove(filename)
    for filename in glob("*.out.*"):
        os.remove(filename)

    os.chdir('..')
    try:
        f = open("initial_guess/mrchem.bas", "w")
        f.write(basf)
        f.close()
    except:
        print "Writing mrchem.bas failed"
        sys.exit(1)

def makexyz(coords):
    nAtoms = len(coords)
    xyz = "    %s\n" % (nAtoms)

    for line in coords[:]:
        sp = line.split()
        elm = sp[0].lower()
        x, y, z = map(float, sp[1:])
        d = periodictable.PeriodicTable[elm].Z
        xyz += "%s       % 10.10f    % 10.10f    % 10.10f\n" % (elm.title(), x, y, z)
    xyz +="\n"
    #print xyz
    return xyz

def makedal(level, nalpha, nbeta):
    lsdal = "**GENERAL\n"
    lsdal += ".NOGCBASIS\n"
    lsdal += "**WAVE FUNCTIONS\n"
    if level == "HF":
        lsdal += ".HF\n"
    else:
        lsdal += ".DFT\n"
        lsdal += level + "\n"
    lsdal += "*DENSOPT\n"
    lsdal += ".DIIS\n"
    lsdal += ".UNREST\n"
    lsdal += ".NALPHA\n"
    lsdal += "%s\n" % nalpha
    lsdal += ".NBETA\n"
    lsdal += "%s\n" % nbeta
    #lsdal += "**INTEGRAL\n"
    #lsdal += ".UNCONT\n"
    lsdal += "*END OF INPUT\n"
    #print lsdal
    return lsdal

def xyz2mol(coords, basis):
    nAtoms = len(coords)
    lsmol = "BASIS\n%s\nTitle 1\nTitle 2\n" % basis
    lsmol += "Atomtypes=%s\n" % nAtoms

    for line in coords[:]:
        sp = line.split()
        elm = sp[0].lower()
        x, y, z = map(float, sp[1:])
        d = periodictable.PeriodicTable[elm].Z
        lsmol += "Charge=%s.0 Atoms=1\n" % d
        lsmol += "%s       % 10.10f    % 10.10f    % 10.10f\n" % (elm.title(), x, y, z)
    lsmol +="\n"
    #print lsmol
    return lsmol

def xyz2bas(coords, basis):
    atomTypes = getNAtomTypes(coords)
    mrbas = "Gaussian basis %s\n" % (basis)
    mrbas += "        %s\n" % (atomTypes)

    match = ''
    N = 0
    middle = ''
    for line in coords[:]:
        name = line.split()[0]
        if (match != '' and name != match):
            top = getBas(basis)[match].splitlines()[0]
            times = int(getBas(basis)[match].splitlines()[0].split()[1])
            top = ("        %s    %s    %s"+times*"    1"+"\n") % \
                    (top.split()[0],N ,top.split()[1])
            bottom =''.join(str(num)+"\n" for num in
                    getBas(basis)[match].splitlines()[2:])
            N = 0
            mrbas += top+middle+bottom
            middle = ''
        balls = line.split()
        middle += "%s       % 5.10f      % 5.10f      % 5.10f\n" % (balls[0], float(balls[1]),
               float(balls[2]), float(balls[3]))
        N += 1
        match = name
    times = int(getBas(basis)[match].splitlines()[0].split()[1])
    top = getBas(basis)[match].splitlines()[0]
    top = ("        %s    %s    %s"+times*"    1"+"\n") % \
            (top.split()[0],N ,top.split()[1])
    bottom =''.join(str(num)+"\n" for num in
            getBas(basis)[match].splitlines()[2:])
    mrbas += top+middle+bottom
    #print mrbas
    return mrbas

def getNElectrons(coords, charge):
    nel = 0
    for line in coords[:]:
        sp = line.split()
        elm = sp[0].lower()
        x, y, z = map(float, sp[1:])
        nel += periodictable.PeriodicTable[elm].Z
    return (nel - charge)

def getNAtomTypes(coords):
    atoms = Set()
    for line in coords[:]:
        elm = line.split()[0]
        atoms.add(elm)
    return len(atoms)

def getBas(bas):
    fn = os.path.join(lsdalton_basdir, bas)
    with open(fn, "r") as f:
        lines = f.readlines()
    return genBas(lines)

def genBas(lines):
    molbas = dict()
    atombas = ''
    lqn = 0
    z = 1
    header = """        %s.    %s
    %s     %%4.10f    %%4.10f    %%4.10f
"""

    for l in lines:
        if re.match("A", l, re.I):
            if len(atombas) > 0:
                molbas[PT[z].symbol] = (header + atombas[:-1]) % \
                    (z, lqn, PT[z].symbol)
                z = int(l.split()[1])
                atombas = ''
                lqn = 0
        elif re.match(r'( +[0-9]+){3}', l):
            lqn += 1
            x = l.split()[0:2]
            atombas += "        " + x[0] + "    " + x[1] + "\n"
        elif re.match(r'[ \t]*$', l):
            pass
        elif not l[0] == "$":
            atombas += l
    molbas[PT[z].symbol] = (header + atombas[:-1]) % \
        (z, lqn, PT[z].symbol)
    return molbas

#def main():
    #run_initial_guess('coord.xyz', '3-21G')
#    xyz2bas(datadir+'/coord.xyz', '3-21G')
#    xyz2mol(datadir+'/coord.xyz', '3-21G')

#if __name__ == '__main__':
    #main()
# vim:ft=python
