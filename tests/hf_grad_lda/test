#!/usr/bin/env python3

import math
import json
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).resolve().parents[1]))

from tester import *  # isort:skip

options = script_cli()

# nuclear component of the molecular gradient as computed by Psi4
psi4_nuc_grad = [0.0, 0.0, 3.007116843196, 0.0, 0.0, -3.007116843196]

# compute numerical gradient with a centered-difference, 5-point stencil
# we have generated the displaced geometries with Psi4
# collect energies
tot_es = []
ele_es = []
for f in [Path(f"reference/numgrad/{x}.json") for x in ["hf_m2", "hf_m1", "hf_p1", "hf_p2"]]:
    with f.open("r") as j:
        data = json.load(j)
    tot_es.append(data["output"]["properties"]["scf_energy"]["E_tot"])
    ele_es.append(data["output"]["properties"]["scf_energy"]["E_el"])


def finite_difference_gradient(energies):
    disp_size = 0.005
    stencil = [1./12, -2./3, 2./3, -1./12]
    # gradient in internal coordinates a.k.a. force
    g_q = sum([s*e for s, e in zip(stencil, energies)]) / disp_size
    # Psi4 uses internal coordinates for displacements
    # This is the transformation matrix back to Cartesian displacements, copy-pasted from Psi4
    B = [ 0.0, 0.0, 0.974486755082, 0.0, 0.0, -0.224445013689]
    # transform from internal to Cartesian coordinates
    # this is laid out as [x_H, y_H, z_H, x_F, y_F, z_F]
    g_c = [g_q * b for b in B]
    # finally, mass-weight the Cartesian gradient
    # masses copy-pasted from periodictable.py
    massweighter = [math.sqrt(m) for m in [0.0, 0.0, 1.00794, 0.0, 0.0, 18.9984032]]
    g_c_mw = [g*w for g,w in zip(g_c, massweighter)]
    return g_c_mw


# compare against reference
filters = {
    SUM_OCCUPIED: rel_tolerance(1.0e-6),
    E_KIN: rel_tolerance(1.0e-6),
    E_EN: rel_tolerance(1.0e-6),
    E_EE: rel_tolerance(1.0e-6),
    E_X: rel_tolerance(1.0e-6),
    E_XC: rel_tolerance(1.0e-6),
    E_EEXT: rel_tolerance(1.0e-6),
    E_NEXT: rel_tolerance(1.0e-6),
    E_EL: rel_tolerance(1.0e-6),
    GEOMETRIC_DERIVATIVE("total"): rel_tolerance(1.0e-6),
}

ierr = run(options, input_file="hf", filters=filters)

# compare nuclear component of the molecular gradient with Psi4
with Path("hf.json").open("r") as o:
    nuc_grad = json.load(o)["output"]["properties"]["geometric_derivative"]["nuclear"]
passed, message = compare_values(nuc_grad,
                                 psi4_nuc_grad,
                                 "MRChem vs. Psi4 nuclear component of the molecular gradient",
                                 rtol=1.0e-6,
                                 atol=1.0e-6)
sys.stdout.write(f"{message}\n")
ierr += 0 if passed else 137

# compare analytical vs. numerical electronic component of the molecular gradient
with Path("hf.json").open("r") as o:
    ele_grad = json.load(o)["output"]["properties"]["geometric_derivative"]["electronic"]
passed, message = compare_values(ele_grad,
                                 finite_difference_gradient(ele_es),
                                 "Analytic vs. numeric electronic component of the molecular gradient",
                                 rtol=1.0e-6,
                                 atol=1.0e-6)
sys.stdout.write(f"{message}\n")
ierr += 0 if passed else 137

# compare analytical vs. numerical total molecular gradient
with Path("hf.json").open("r") as o:
    tot_grad = json.load(o)["output"]["properties"]["geometric_derivative"]["total"]
passed, message = compare_values(tot_grad,
                                 finite_difference_gradient(tot_es),
                                 "Analytic vs. numeric total molecular gradient",
                                 rtol=1.0e-6,
                                 atol=1.0e-6)
sys.stdout.write(f"{message}\n")
ierr += 0 if passed else 137

sys.exit(ierr)
